{
  "Parameters": {
    "AMIID": {
      "Type": "String"
    },
    "NETWORK": {
      "Type": "String"
    },
    "IMAGES3BUCKET": {
      "Type": "String"
    },
    "POLICY": {
      "Type": "String"
    },
    "CERTIFICATE": {
      "Type": "String"
    },
    "DNSDOMAIN": {
      "Type": "String"
    },
    "SUBNET1": {
      "Type": "String"
    },
    "SUBNET2": {
      "Type": "String"
    },
    "SUBNET3": {
      "Type": "String"
    },
    "POLICY": {
      "Type": "String"
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "loadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http traffic to webserver",
        "VpcId": {
          "Ref": "NETWORK"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-csye6225-load-balancer-security"
                ]
              ]
            }
          }
        ]
      }
    },
    "WebSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NETWORK}-VPC"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "SourceSecurityGroupId": {
              "Ref": "loadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "loadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "Load Balancer Target Group",
        "TargetType": "instance",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPort": 8080,
        "UnhealthyThresholdCount": 10,
        "HealthCheckPath": "/",
        "Protocol": "HTTP",
        "Port": 8080,
        "VpcId" : {"Ref" : "myVpc"},
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "load_balancer"
          }
        ]
      }
    },
    "elasticAppLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "Elastic App Load Balancer",
        "SecurityGroups": [
          {
            "Ref": "loadBalancerSecurityGroup"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4",
        "Subnets": [
          {
            "Ref": "SUBNET1"
          },
          {
            "Ref": "SUBNET2"
          },
          {
            "Ref": "SUBNET3"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "load_balancer"
          }
        ]
      }
    },
    "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CERTIFICATE"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "loadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "elasticAppLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "httpListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
              "Port": 443
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "elasticAppLoadBalancer"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "myDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "elasticAppLoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "elasticAppLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "Comment": "Domain for my instance",
        "HostedZoneName": {
          "Ref": "DNSDOMAIN"
        },
        "Name": {
          "Ref": "DNSDOMAIN"
        },
        "Type": "A"
      }
    },
    "asg_launch_config": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "True",
        "ImageId": {
          "Ref": "AMIID"
        },
        "KeyName": "centos",
        "InstanceType": "t2.micro",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : 20,
              "VolumeType" : "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe",
                "cd /home/centos/tomcat/bin",
                "sudo touch setenv.sh",
                "sudo chmod 777 /home/centos/tomcat/bin/setenv.sh",
                "echo 'JAVA_OPTS=\"-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> setenv.sh",
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=prod\"' >> setenv.sh",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"-DBUCKET_NAME=",
                      {
                        "Ref": "IMAGES3BUCKET"
                      },
                      "\"' >> setenv.sh"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "PostGresDB",
                          "Endpoint.Address"
                        ]
                      },
                      ":5432/csye6225\\\"\"' >> setenv.sh"
                    ]
                  ]
                },
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"' >> setenv.sh",
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"' >> setenv.sh",
                "cd /home/centos/tomcat/bin/",
                "./shutdown.sh",
                "./startup.sh"
              ]
            ]
          }
        },
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "IamInstanceProfile" : {
          "Fn::ImportValue" : {
            "Fn::Sub": "${POLICY}-InstanceProfile"
          }
        }
      }
    },
    "autoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "asg_launch_config"
        },
        "Cooldown": "60",
        "DesiredCapacity": "3",
        "MinSize": "3",
        "MaxSize": "7",
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Key": "Name",
            "Value": "asg_launch_config"
          }
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "autoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "autoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "String"
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Delete",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NETWORK}-VPC"
          }
        }
      }
    },
    "DBSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "DBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": 5432,
        "ToPort": 5432,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WebSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "PostGresDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "20",
        "Engine": "postgres",
        "EngineVersion": "10.6",
        "DBInstanceClass": "db.t2.micro",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-su19",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "PubliclyAccessible": true,
        "DBName": "csye6225",
        "VPCSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PostgreSQL Database"
          }
        ]
      },
      "DeletionPolicy": "Delete"
    },
    "DynamoDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "csye6225",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 5% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "autoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 3% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "3",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "autoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "sqlInjectionSet": {
      "Type": "AWS::WAFRegional::SqlInjectionMatchSet",

      "Properties": {
        "Name": "RegionalSqlInjectionMatchSet",
        "SqlInjectionMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "sqlInjectionRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "SqlInjectionRule",
        "Name": "SqlInjectionRule",
        "Predicates": [
          {
            "Type": "SqlInjectionMatch",
            "Negated": false,
            "DataId": {"Ref":"sqlInjectionSet"}
          }
        ]
      }
    },
    "XSSSet": {
      "Type": "AWS::WAFRegional::XssMatchSet",

      "Properties": {
        "Name": "Regional Xss MatchSet",
        "XssMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "XSSRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "XSSRule",
        "Name": "XSSRule",
        "Predicates": [
          {
            "Type": "XssMatch",
            "Negated": false,
            "DataId": {"Ref":"XSSSet"}
          }
        ]
      }
    },
    "PathsStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "RegionalPathsStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "PathsRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "PathsRuleMetric",
        "Name": "PathsRuleName",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {"Ref":"PathsStringSet"}
          }
        ]
      }
    },
    "ServerSideIncludesSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "Server Side Includes Set",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": "/includes",
            "TextTransformation": "URL_DECODE",
            "PositionalConstraint": "STARTS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".cfg",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".conf",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".config",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".ini",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".log",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".bak",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".bakup",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TargetString": ".txt",
            "TextTransformation": "LOWERCASE",
            "PositionalConstraint": "ENDS_WITH"
          }
        ]
      }
    },
    "ServerSideIncludesRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "Name": "ServerSideIncludesRule",
        "MetricName": "ServerSideIncludesRule",
        "Predicates": [
          {
            "DataId": {
              "Ref": "ServerSideIncludesSet"
            },
            "Negated": false,
            "Type": "ByteMatch"
          }
        ]
      }
    },
    "AuthTokenStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "Regional Byte MatchSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "csye6225-summer2019",
            "TextTransformation": "NONE"
          }
        ]
      }
    },
    "AuthTokenRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "AuthTokenRule",
        "Name": "AuthTokenRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {"Ref":"AuthTokenStringSet"}
          }
        ]
      }
    },
    "BadReferers": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "Bad Referers",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TargetString": "badrefer1",
            "TextTransformation": "URL_DECODE",
            "PositionalConstraint": "CONTAINS"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "authorization"
            },
            "TargetString": "QGdtYWlsLmNvbQ==",
            "TextTransformation": "URL_DECODE",
            "PositionalConstraint": "CONTAINS"
          }
        ]
      }
    },
    "BadReferersRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "Name": "BadReferersRule",
        "MetricName": "BadReferersRule",
        "Predicates": [
          {
            "DataId": {
              "Ref": "BadReferers"
            },
            "Negated": false,
            "Type": "ByteMatch"
          }
        ]
      }
    },
    "IpBlacklistSet": {
      "Type": "AWS::WAFRegional::IPSet",

      "Properties": {
        "Name": "IPSet for blacklisted IP addresses avoiding security vulnerabilities",
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": "10.0.0.0/8"
          },
          {
            "Type": "IPV4",
            "Value": "192.168.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "169.254.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "172.16.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "127.0.0.1/32"
          }
        ]
      }
    },
    "IpBlacklistRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "IpBlacklistRule",
        "Name": "IpBlacklistRule",
        "Predicates": [
          {
            "Type": "IPMatch",
            "Negated": false,
            "DataId": {"Ref":"IpBlacklistSet"}
          }
        ]
      }
    },
    "MyIPSetWhiteList": {
      "Type": "AWS::WAFRegional::IPSet",
      "Properties": {
        "Name": "WhiteList IP Address Set",
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": "11.0.0.0/16"
          }
        ]
      }
    },
    "MyIPSetWhiteListRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "Name": "WhiteList IP Address Rule",
        "MetricName": "MyIPSetWhiteListRule",
        "Predicates": [
          {
            "DataId": {
              "Ref": "MyIPSetWhiteList"
            },
            "Negated": false,
            "Type": "IPMatch"
          }
        ]
      }
    },
    "SizeRestrictionSet": {
      "Type": "AWS::WAFRegional::SizeConstraintSet",

      "Properties": {
        "Name": "RegionslSizeConstraintMatchSet",
        "SizeConstraints": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "512"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "1024"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size":"10000000"
          },
          {
            "FieldToMatch": {
              "Type" : "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size":"4096"

          }
        ]
      }
    },
    "SizeRestrictionRule": {
      "Type": "AWS::WAFRegional::Rule",

      "Properties": {
        "MetricName": "SizeRestrictionRule",
        "Name": "SizeRestrictionRule",
        "Predicates": [
          {
            "Type": "SizeConstraint",
            "Negated": false,
            "DataId": {"Ref":"SizeRestrictionSet"}
          }
        ]
      }
    },
    "MyWebACL": {
      "Type": "AWS::WAFRegional::WebACL",

      "Properties": {

        "Name": "My Web ACL",
        "DefaultAction": {
          "Type": "ALLOW"
        },
        "MetricName": "WebACL",
        "Rules": [

          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 1,
            "RuleId": {"Ref":"sqlinjectionRule"}
          },

          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 2,
            "RuleId": {"Ref":"AuthTokenRule"}
          },

          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 3,
            "RuleId": {"Ref":"XSSRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 4,
            "RuleId": {"Ref":"PathsRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 5,
            "RuleId": {"Ref":"IpBlacklistRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 6,
            "RuleId": {"Ref":"SizeRestrictionRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 1,
            "RuleId": {"Ref":"sqlinjectionRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 1,
            "RuleId": {"Ref":"sqlinjectionRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 1,
            "RuleId": {"Ref":"sqlinjectionRule"}
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 10,
            "RuleId": {"Ref":"MyIPSetWhiteListRule"}
          }
        ]
      }
    },
    "MyWebACLAssociation": {

      "Type": "AWS::WAFRegional::WebACLAssociation",
      "DependsOn":["elasticAppLoadBalancer","MyWebACL"],
      "Properties": {
        "ResourceArn": { "Ref": "elasticAppLoadBalancer" },
        "WebACLId": { "Ref": "MyWebACL" }
      }
    }
  }
}


