{
  "Parameters": {
    "AMIID": {
      "Type": "String"
    },
    "NETWORK": {
      "Type": "String"
    },
    "IMAGES3BUCKET": {
      "Type": "String"
    },
    "POLICY": {
      "Type": "String"
    },
    "CERTIFICATE": {
      "Type": "String"
    },
    "DNSDOMAIN": {
      "Type": "String"
    },
    "CODEDEPLOYS3BUCKET": {
      "Type": "String"
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "loadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http traffic to webserver",
        "VpcId": {
          "Fn::ImportValue": {
          "Fn::Sub": "${NETWORK}-VPC"
        }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-csye6225-launch-config"
                ]
              ]
            }
          }
        ]
      }
    },
    "WebSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NETWORK}-VPC"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "SourceSecurityGroupId": {
              "Ref": "loadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "loadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "LoadBalancerTargetGroup",
        "TargetType": "instance",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPort": 8080,
        "UnhealthyThresholdCount": 10,
        "HealthCheckPath": "/",
        "Protocol": "HTTP",
        "Port": 8080,
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NETWORK}-VPC"
          }
        },
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "asg_launch_config"
          }
        ]
      }
    },
    "elasticAppLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "ElasticAppLoadBalancer",
        "SecurityGroups": [
          {
            "Ref": "loadBalancerSecurityGroup"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4",
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID2"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID3"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "asg_launch_config"
          }
        ]
      }
    },
    "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CERTIFICATE"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "loadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "elasticAppLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "httpListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
              "Port": 443
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "elasticAppLoadBalancer"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "myDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "elasticAppLoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "elasticAppLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "Comment": "Domain for my instance",
        "HostedZoneName": {
          "Ref": "DNSDOMAIN"
        },
        "Name": {
          "Ref": "DNSDOMAIN"
        },
        "Type": "A"
      }
    },
    "asgLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "True",
        "ImageId": {
          "Ref": "AMIID"
        },
        "KeyName": "centos",
        "InstanceType": "t2.micro",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : 20,
              "VolumeType" : "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe",
                "cd /home/centos/tomcat/bin",
                "sudo touch setenv.sh",
                "sudo chmod 777 /home/centos/tomcat/bin/setenv.sh",
                "echo 'JAVA_OPTS=\"-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> setenv.sh",
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=prod\"' >> setenv.sh",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"-DBUCKET_NAME=",
                      {
                        "Ref": "IMAGES3BUCKET"
                      },
                      "\"' >> setenv.sh"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "PostGresDB",
                          "Endpoint.Address"
                        ]
                      },
                      ":5432/csye6225\\\"\"' >> setenv.sh"
                    ]
                  ]
                },
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"' >> setenv.sh",
                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"' >> setenv.sh",
                "cd /home/centos/tomcat/bin/",
                "./shutdown.sh",
                "./startup.sh"
              ]
            ]
          }
        },
        "SecurityGroups": [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "IamInstanceProfile" : {
          "Ref" : "RootInstanceProfile"
        }
      }
    },
    "autoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "asgLaunchConfig"
        },
        "Cooldown": "60",
        "DesiredCapacity": "3",
        "MinSize": "3",
        "MaxSize": "7",
        "TargetGroupARNs": [
          {"Ref": "loadBalancerTargetGroup"}
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID2"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID3"
            }
          }
        ],
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Key": "Name",
            "Value": "asg_launch_config"
          }
        ]
      },
      "DependsOn": ["Listener"]
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "autoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "autoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NETWORK}-SubnetID2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "String"
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Delete",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NETWORK}-VPC"
          }
        }
      }
    },
    "DBSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "DBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": 5432,
        "ToPort": 5432,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WebSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "PostGresDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "20",
        "Engine": "postgres",
        "EngineVersion": "10.6",
        "DBInstanceClass": "db.t2.micro",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-su19",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "PubliclyAccessible": true,
        "DBName": "csye6225",
        "VPCSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PostgreSQL Database"
          }
        ]
      },
      "DeletionPolicy": "Delete"
    },
    "DynamoDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "csye6225",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 5% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "autoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 3% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "3",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "autoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "CircleCIEc2Ami": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CopyImage",
                "ec2:CreateImage",
                "ec2:CreateKeypair",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DeleteKeyPair",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSnapshot",
                "ec2:DeleteVolume",
                "ec2:DeregisterImage",
                "ec2:DescribeImageAttribute",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeRegions",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSnapshots",
                "ec2:DescribeSubnets",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:DetachVolume",
                "ec2:GetPasswordData",
                "ec2:ModifyImageAttribute",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifySnapshotAttribute",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "circleci-ec2-ami",
        "Users": [
          "circleci"
        ]
      }
    },
    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Groups": [
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:GetObject",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CODEDEPLOYS3BUCKET"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "IMAGES3BUCKET"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CodeDeploy-EC2-S3",
        "Roles" : [  {"Ref": "CodeDeployEC2ServiceRole"}]
      }
    },
    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Groups": [
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CODEDEPLOYS3BUCKET"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCI-Upload-To-S3",
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Groups": [
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      { "Fn::Sub" : "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApp}" }

                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      { "Fn::Sub" : "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}" },
                      "deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      { "Fn::Sub" : "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}" },
                      "deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      { "Fn::Sub" : "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}" },
                      "deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CirlceCI-Code-Deploy",
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCILambda": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "lambda:*",
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "CircleCI-Lambda",
        "Users": [
          "circleci"
        ]
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": "CodeDeployEC2ServiceRole",
        "ManagedPolicyArns" : [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        ]
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": "CodeDeployServiceRole",
        "ManagedPolicyArns" : [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CodeDeployApp": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApp"
        },
        "AutoRollbackConfiguration": {
          "Enabled": "true",
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "Ec2TagFilters" : [
          {
            "Key": "Name",
            "Value": "asg_launch_config",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "AutoScalingGroups": [
          {
            "Ref": "autoScalingGroup"
          }
        ],
        "LoadBalancerInfo": {
          "ElbInfoList": [
            {
              "Name": "appLoadbalancer"
            }
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
          "DeploymentType": "IN_PLACE"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs" : {
    "Dynamodb" : {
      "Description" : "Dynamodb to be attached with lambda function",
      "Value" :  { "Ref" : "DynamoDB" },
      "Export" : { "Name" : "csye6225-dynamodb" }
    },
    "ElasticLoadBalancer": {
      "Description": "Elastic Application Load Balancer",
      "Value": { "Ref":  "elasticAppLoadBalancer" },
      "Export": { "Name": "AutoScaling-ELB" }
    }
  }
}


